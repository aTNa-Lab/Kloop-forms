{"version":3,"sources":["Components/form/textInput.js","Components/form/selectBox.js","Components/form/radiobutton.js","Components/form/timePickers.js","Components/form/radioHorizontal.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","width","BasicTextFields","props","classes","React","useState","value","setValue","index","noValidate","autoComplete","title","TextField","className","id","label","onChange","event","target","returnAnswer","formControl","minWidth","SelectBox","open","setOpen","FormControl","InputLabel","Select","labelId","onClose","onOpen","MenuItem","answers","map","el","i","key","RadioButton","const","RadioGroup","aria-label","name","FormControlLabel","control","Radio","container","display","flexWrap","textField","marginLeft","spacing","marginRight","TimePickers","type","InputLabelProps","shrink","InputProps","disableUnderline","RadioHorizontal","tmp","handleChange","subquestion","question","component","color","labelPlacement","queryString","require","App","state","questions","main_title","gateway","showAnswers","downloadData","urlString","parse","window","location","search","decode","console","log","url","fetch","then","response","json","data","setState","uploadData","method","mode","body","JSON","stringify","headers","success","catch","error","answer","this","questionList","onClick","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5a7225f5.chunk.js","sourcesContent":["import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\troot: {\r\n\t\t'& > *': {\r\n\t\t\twidth: '40ch',\r\n\t\t},\r\n\t},\r\n\r\n}));\r\n\r\n\r\nfunction BasicTextFields(props) {\r\n\tconst classes = useStyles();\r\n\tconst [value, setValue] = React.useState('');\r\n\tconst index = props.index\r\n\r\n\tconst handleChange = (event) => {\r\n\t\tsetValue(event.target.value)\r\n\t\tprops.returnAnswer(event.target.value, index)\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<form noValidate autoComplete=\"off\">\r\n\t\t\t\t<h4>{props.title}</h4>\r\n\t\t\t\t<TextField \r\n\t\t\t\t\tclassName={classes.root}\r\n\t\t\t\t\tid={props.title}\r\n\t\t\t\t\tlabel=\"Мой ответ\"\r\n\t\t\t\t\tvalue={value}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t/>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default BasicTextFields","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tformControl: {\r\n\t\tminWidth: 120,\r\n\t},\r\n}));\r\n\r\nexport default function SelectBox(props) {\r\n\tconst classes = useStyles();\r\n\tconst [value, setValue] = React.useState('');\r\n\tconst index = props.index\r\n\tconst [open, setOpen] = React.useState(false);\r\n\r\n\tconst handleChange = (event) => {\r\n\t\tsetValue(event.target.value);\r\n\t\tprops.returnAnswer(event.target.value, index)\r\n\t};\r\n\r\n\tconst handleClose = (event) => {\r\n\t\tsetOpen(false)\r\n\t};\r\n\r\n\tconst handleOpen = (event) => {\r\n\t\tsetOpen(true)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h4>{props.title}</h4>\r\n\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t<InputLabel id=\"controlled-open-select-label\">Выбрать</InputLabel>\r\n\t\t\t\t<Select\r\n\t\t\t\t\tlabelId=\"controlled-open-select-label\"\r\n\t\t\t\t\tid=\"controlled-open-select\"\r\n\t\t\t\t\topen={open}\r\n\t\t\t\t\tonClose={handleClose}\r\n\t\t\t\t\tonOpen={handleOpen}\r\n\t\t\t\t\tvalue={value}\r\n\t\t\t\t\tonChange={handleChange}>\r\n\t\t\t\t\t<MenuItem value={\"\"}><em>None</em></MenuItem>\r\n\t\t\t\t\t{props.answers.map((el, i) => <MenuItem key={i} value={el}>{el}</MenuItem>)}\r\n\t\t\t\t</Select>\r\n\t\t\t</FormControl>\r\n\t\t</div>\r\n\t)\r\n\r\n}","import React from 'react';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nexport default function RadioButton(props) {\r\n\tconst [value, setValue] = React.useState('');\r\n\tconst index = props.index\r\n\r\n\tconst handleChange = (event) => {\r\n\t\tsetValue(event.target.value)\r\n\t\tprops.returnAnswer(event.target.value, index)\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h4>{props.title}</h4>\r\n\t\t\t<FormControl const='fieldset'>\r\n\t\t\t\t<RadioGroup aria-label={props.title} name={props.title} value={value} onChange={handleChange}>\r\n\t\t\t\t\t{props.answers.map((el, i) => <FormControlLabel key={i} value={el} control={<Radio/>} label={el}/>)}\r\n\t\t\t\t</RadioGroup>\r\n\t\t\t</FormControl>\r\n\t\t</div>\r\n\t)\r\n\t\t;\r\n}","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tcontainer: {\r\n\t\tdisplay: 'flex',\r\n\t\tflexWrap: 'wrap',\r\n\t},\r\n\ttextField: {\r\n\t\tmarginLeft: theme.spacing(1),\r\n\t\tmarginRight: theme.spacing(1),\r\n\t\twidth: 'auto',\r\n\t},\r\n}));\r\n\r\nexport default function TimePickers(props) {\r\n\tconst classes = useStyles();\r\n\tconst [value, setValue] = React.useState('');\r\n\tconst index = props.index\r\n\r\n\tconst handleChange = (event) => {\r\n\t\tsetValue(event.target.value)\r\n\t\tprops.returnAnswer(event.target.value, index)\r\n\t};\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h4>{props.title}</h4>\r\n\t\t\t<form className={classes.container} noValidate>\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid={props.title}\r\n\t\t\t\t\tlabel=\"Время\"\r\n\t\t\t\t\ttype=\"time\"\r\n\t\t\t\t\tvalue={value}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\tclassName={classes.textField}\r\n\t\t\t\t\tInputLabelProps={{\r\n\t\t\t\t\t\tshrink: true,\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tInputProps={{disableUnderline: true}}\r\n\t\t\t\t/>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n}","import React from 'react';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport '../../App.css'\r\n\r\nexport default function RadioHorizontal(props) {\r\n\tconst [value, setValue] = React.useState({});\r\n\tconst index = props.index\r\n\tlet tmp = {}\r\n\r\n\tconst handleChange = id => event => {\r\n\t\ttmp = {...value}\r\n\t\ttmp[id] = event.target.value\r\n\t\tsetValue(tmp)\r\n\t\tprops.returnAnswer(tmp, index)\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"radioHorizontal\">\r\n\t\t\t<h4>{props.title}</h4>\r\n\t\t\t<div className=\"question_item\">\r\n\t\t\t\t{props.subquestion.map((question, id) =>\r\n\t\t\t\t\t<div className=\"question_item_\" key={id}>\r\n\t\t\t\t\t\t<p>{question}</p>\r\n\t\t\t\t\t\t<FormControl component=\"fieldset\" className=\"question_item__answer\">\r\n\t\t\t\t\t\t\t<RadioGroup aria-label=\"position\" name=\"position\" className=\"question_item__answer_\"\r\n\t\t\t\t\t\t\t            onChange={handleChange(id)}>\r\n\t\t\t\t\t\t\t\t{props.answers.map((el, i) =>\r\n\t\t\t\t\t\t\t\t\t<FormControlLabel\r\n\t\t\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\t\t\tvalue={el}\r\n\t\t\t\t\t\t\t\t\t\tcontrol={<Radio color=\"primary\"/>}\r\n\t\t\t\t\t\t\t\t\t\tlabel={id > 0 ? \"\" : el}\r\n\t\t\t\t\t\t\t\t\t\tlabelPlacement=\"top\"\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</RadioGroup>\r\n\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\n","import React, {Component} from 'react';\r\nimport \"./App.css\"\r\n\r\nimport TextInput from \"./Components/form/textInput\";\r\nimport SelectBox from \"./Components/form/selectBox\";\r\nimport RadioButton from \"./Components/form/radiobutton\";\r\nimport TimePickers from \"./Components/form/timePickers\";\r\nimport RadioHorizontal from \"./Components/form/radioHorizontal\";\r\n\r\nconst queryString = require('query-string');\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    questions: [],\r\n    main_title: '',\r\n    gateway: '',\r\n    answers: {},\r\n    showAnswers: false\r\n  }\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.downloadData()\r\n\t}\r\n\r\n\tdownloadData = () => {\r\n\t\tlet urlString = queryString.parse(window.location.search, {decode: false})\r\n\t\tconsole.log(urlString)\r\n\t\tif (urlString.url) {\r\n\t\t\tfetch(urlString.url)\r\n\t\t\t\t.then((response) => {\r\n\t\t\t\t\tconsole.log(\"RESPONSE\", response)\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t})\r\n\t\t\t\t.then((data) => {\r\n\t\t\t\t\tconsole.log(\"DATA\", data);\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tquestions: data.questions,\r\n\t\t\t\t\t\tmain_title: data.main_title,\r\n\t\t\t\t\t\tgateway: data.gateway\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t} else {\r\n\t\t\tconsole.log(\"ERROR: no url detected\")\r\n\t\t}\r\n\t}\r\n\r\n  uploadData = (data) => {\r\n    fetch(this.state.gateway, { \r\n    method: 'POST',\r\n    mode: 'no-cors',\r\n    body: JSON.stringify(data),\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  }).then(\r\n    response => response.json()\r\n  ).then(\r\n    success => console.log(success)\r\n  ).catch(\r\n    error => {\r\n      console.log(\"Error\", error)\r\n      this.setState({showAnswers: true})\r\n    }\r\n  );\r\n  }\r\n\r\n\treturnAnswer = (answer, index) => {\r\n\t\tlet answers = {...this.state.answers}\r\n\t\tanswers[index] = answer\r\n\t\tthis.setState({answers: answers})\r\n\t}\r\n\r\n  render () {\r\n    let questionList = this.state.questions.map((el, i) => {\r\n      if (el.type === 'input') {\r\n        return <TextInput key={i} index={i} title={el.title} returnAnswer={this.returnAnswer} />\r\n      }\r\n      else if (el.type === 'select') {\r\n        return <SelectBox key={i} index={i} title={el.title} answers={el.answer} returnAnswer={this.returnAnswer} />\r\n      }\r\n      else if (el.type === 'radio') {\r\n        return <RadioButton key={i} index={i} title={el.title} answers={el.answer} returnAnswer={this.returnAnswer} />\r\n      }\r\n      else if (el.type === 'time') {\r\n        return <TimePickers key={i} index={i} title={el.title} returnAnswer={this.returnAnswer} />\r\n      }\r\n      else if (el.type === 'multiradio') {\r\n        return <RadioHorizontal key={i} index={i} title={el.title} subquestion={el.subquestion} answers={el.answer} returnAnswer={this.returnAnswer} />\r\n      }\r\n      else {\r\n        return null\r\n      }\r\n    })\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h1 className=\"text-align-center\">{this.state.main_title}</h1>\r\n        <button onClick={() => this.uploadData(\"HELLo\")}></button>\r\n        {this.state.showAnswers ? <p>{JSON.stringify(this.state.answers)}</p> : null}\r\n        <button onClick={() => this.uploadData({\"a\":\"HELLo\"})}>Send data</button>\r\n        <button onClick={() => console.log(this.state)}>Show state</button>\r\n        {questionList}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}